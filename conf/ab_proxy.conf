
#user  nobody;
worker_processes  auto;
daemon on;

error_log  logs/error.log  warn;



events {
  #use epoll;
  worker_connections  1024;
}


http {
  #include       mime.types;
  #default_type  application/octet-stream;
  charset utf-8;


  log_format  main  '$remote_addr|$remote_user|$time_local|$host|$request|'
            '$status|$request_time|$body_bytes_sent|$http_referer|'
            '$http_user_agent|$http_x_forwarded_for|$upstream_response_time|';

  access_log logs/access.log main;


  #lua_need_request_body on;
  lua_package_path "/opt/simple-ab-testing-gateway/lib/?.lua;;";

  init_worker_by_lua_block {
    require('balance_util').ab_testing_init_worker()
  }

  upstream backend_ab {
      server 0.0.0.1;
      balancer_by_lua_block {
          local b = require "ngx.balancer"
          local server = require('balance_util').get_server()
          assert(b.set_current_peer(server))
      }
  }

  server {
    listen 0.0.0.0:12340;
    location / {
      proxy_pass http://backend_ab;
    }

    location /ab/ {
      content_by_lua_file /opt/simple-ab-testing-gateway/lib/ab_manager.lua;
    }
  }

  # the default server(for test only)
  server {
    listen 127.0.0.1:1000;
    location / {
      content_by_lua_block {
        ngx.say("default server");
      }
    }
  }
  # the test server(for test only)
  server {
    listen 127.0.0.1:2000;
    location / {
      content_by_lua_block {
        ngx.say("test server");
      }
    }
  }
}